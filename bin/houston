#!/usr/bin/env bash

VERSION="1.0.0" 

#
# Colour definitions
#
#
#
ESC_SEQ="\x1b["
COL_RESET=${ESC_SEQ}"39;49;00m"
COL_LYELLOW=${ESC_SEQ}"33;01m"
COL_LGREEN=${ESC_SEQ}"32;01m"
COL_CYAN=${ESC_SEQ}"0;36m"
COL_GREEN=${ESC_SEQ}"0;32m"
COL_MAGENTA=${ESC_SEQ}"0;35m"

CONTAINER_APP="app"
CONTAINER_MYSQL="mysql"
CONTAINER_NODE="node"

UNAMEOUT="$(uname -s)"

VENDORNAME="withoutfanfare"
APPNAME="houston"

#
# Create base docker-compose command to run
#
#
#
# COMPOSE_FILE="dev"
# COMPOSE="docker-compose"
COMPOSE="docker-compose -f docker-compose.yml"

# Disable pseudo-TTY allocation for CI (Jenkins)
TTY=""

if [ ! -z "$BUILD_NUMBER" ]; then
    # COMPOSE_FILE="ci"
    COMPOSE="docker-compose -f docker-compose.ci.yml"
    TTY="-T"
fi

# COMPOSE="docker-compose -f docker-compose.$COMPOSE_FILE.yml"



#
# Copy docker-compose.yml
#
#
#
publishComposeConfig() {
   if [ -f ./docker-compose.yml ]; then
      cp ./docker-compose.yml ./docker-compose.yml.bak
   fi
   
   cp vendor/$VENDORNAME/$APPNAME/templates/docker-compose.base.yml ./docker-compose.base.yml 
   cp vendor/$VENDORNAME/$APPNAME/templates/docker-compose.dev.yml ./docker-compose.yml 
   cp vendor/$VENDORNAME/$APPNAME/templates/docker-compose.ci.yml ./docker-compose.ci.yml
   
}



#
# Copy .env.example 
#
#
#
publishEnvConfig() {
   if [ -f ./.env ]; then
       cp vendor/$VENDORNAME/$APPNAME/templates/.env.example ./.env.houston.example
    else
       cp vendor/$VENDORNAME/$APPNAME/templates/.env.example ./.env
    fi
}



#
# Copy runtimes to docker
#
#
#
publishRuntimes() {
   mkdir docker 
   cp -r vendor/$VENDORNAME/$APPNAME/runtimes/* ./docker/ 
   # TODO: find and replace context in docker-compose.yml 
   # to use ./docker instead of vendor/ runtime
}



#
# Publish all template files
#
#
#
publishStubs() {
    intro="${COL_CYAN}Publish Files\n${COL_RESET}"
    echo -e "$intro"    
    publishRuntimes
}



#
#
#
#
#
showVersion() {
    intro="\n${COL_GREEN}Houston${COL_RESET} {COL_CYAN}Docker${COL_RESET}\n"
    intro="$intro   ${COL_CYAN}Version ${VERSION}\n${COL_RESET}"
    echo -e "$intro"
}



#
#
#
#
#
showHelp() {
    showVersion

    usage="${COL_LYELLOW}Usage:\n${COL_RESET}"
    usage="$usage  ./houston <cmd> <options>"

    commands="${COL_LYELLOW}Commands:\n${COL_RESET}"
    commands="$commands  art | artisan <cmd>         Run Laravel Artisan CLI in ${COL_MAGENTA}${CONTAINER_APP}${COL_RESET} container\n"
    commands="$commands  composer <cmds>             Run Composer in ${COL_MAGENTA}${CONTAINER_APP}${COL_RESET} container\n"
    commands="$commands  mysql                       Run MySQL CLI in ${COL_MAGENTA}${CONTAINER_MYSQL}${COL_RESET} container\n"
    commands="$commands  dump (autoload)             Performs composer dump-autoload in ${COL_MAGENTA}${CONTAINER_APP}${COL_RESET} container\n"
    commands="$commands  exec <container>            Execute a command in a running container\n"
    commands="$commands  help                        Shows Help screen\n"
    commands="$commands  logs <container> < -f >     Displays all logs for <container> and optionally tail\n"
    commands="$commands  npm                         Execute npm command using ${COL_MAGENTA}${CONTAINER_NODE}${COL_RESET} container\n"
    commands="$commands  ps                          Display list of all running containers in current directory\n"
    commands="$commands  launch < -l >               Starts all containers defined in ${COL_LGREEN}docker-compose.yml${COL_RESET} file\n"
    commands="$commands  land                        Stops all containers defined in ${COL_LGREEN}docker-compose.yml${COL_RESET} file\n"
    commands="$commands  test [params]               Runs PHPUnit using supplied options in ${COL_MAGENTA}${CONTAINER_APP}${COL_RESET} container\n"
    commands="$commands  tinker                      Runs Tinker in ${COL_MAGENTA}${CONTAINER_APP}${COL_RESET} container\n"
    commands="$commands  npm <options>               Runs npm using supplied options in ${COL_MAGENTA}${CONTAINER_NODE}${COL_RESET} container\n"
    commands="$commands  yarn <options>              Runs yarn using supplied options in ${COL_MAGENTA}${CONTAINER_NODE}${COL_RESET} container\n"

    options="${COL_LYELLOW}Options:\n${COL_RESET}"
    options="$options --help, -h                   Shows Help (this screen)\n"
#    options="$options --logs, -l                   Run containers in detached mode (with logging)\n"
    options="$options --version, -V, version       Show Version\n"

    examples="${COL_LYELLOW}Examples:\n${COL_RESET}"
    examples="$examples  ${COL_CYAN}$ ./vendor/bin/houston launch${COL_RESET}\n"
    examples="$examples  ${COL_CYAN}$ ./vendor/bin/houston land${COL_RESET}\n"
    examples="$examples  ${COL_CYAN}$ ./vendor/bin/houston dump${COL_RESET}\n"
    examples="$examples  ${COL_CYAN}$ ./vendor/bin/houston logs # all container logs${COL_RESET}\n"
    examples="$examples  ${COL_CYAN}$ ./vendor/bin/houston composer require <vendor/package>${COL_RESET}\n"
    examples="$examples  ${COL_CYAN}$ ./vendor/bin/houston mysql${COL_RESET}\n"
    examples="$examples  ${COL_CYAN}$ ./vendor/bin/houston artisan migrate --seed${COL_RESET}\n"
    examples="$examples  ${COL_CYAN}$ ./vendor/bin/houston art db:seed${COL_RESET}\n"
    examples="$examples  ${COL_CYAN}$ ./vendor/bin/houston test --filter=MyFilter${COL_RESET}\n"

    printf "\n"
    printf "$usage\n\n"
    printf "$commands\n"
    printf "$options\n"
    printf "$examples\n"
}



#
# Flags
#
#
#
if [ "$1" == "--version" ] || [ "$1" == "-v" ] || [ "$1" == "version" ]; then
    showVersion
    exit 1
fi

if [ "$1" == "--help" ] || [ "$1" == "-H" ] || [ "$1" == "help" ]; then
    showHelp
    exit 1
fi

if [ "$1" == "--publish" ] || [ "$1" == "-P" ] || [ "$1" == "publish" ]; then
    publishStubs
    exit 1
fi


#
# Check machine is compatible with Docker
#
#
#
case "${UNAMEOUT}" in
Linux*)             MACHINE=linux;;
Darwin*)            MACHINE=mac;;
*)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Houston supports macOS, Linux, and Windows (WSL2)." >&2
    exit 1
fi


#
# Auto create .env file if none present
#
#
#
if [ ! -f ./.env ]; then
   publishEnvConfig
fi


#
# Auto create docker-compose.yml file if none present
#
#
#
if [ ! -f ./docker-compose.yml ]; then
   publishComposeConfig
fi


if [ "$MACHINE" == "linux" ]; then
    export SEDCMD="sed -i"
elif [ "$MACHINE" == "mac" ]; then
    export SEDCMD="sed -i .bak"
fi

# Ensure that Docker is running...
if ! docker info > /dev/null 2>&1; then
    echo -e "${WHITE}Docker is not running.${NC}" >&2
    exit 1
fi

# Determine if Docker is currently up...
PSRESULT="$(docker-compose ps -q)"

if $COMPOSE ps | grep 'Exit' &> /dev/null; then
    $COMPOSE down > /dev/null 2>&1
    EXEC="no"
elif [ -n "$PSRESULT" ]; then
    EXEC="yes"
else
    EXEC="no"
fi



function warn_down {
    echo -e "${WHITE}Houston is not running.${NC}" >&2
    echo "" >&2
    echo -e "${WHITE}Use Houston with the following commands:${NC} './vendor/bin/houston up' or './vendor/bin/houston up -d'" >&2
    exit 1
}






if [ $# -gt 0 ]; then

# Source the ".env" file so Laravel's environment variables are available...
if [ -f ./.env ]; then
    source ./.env
fi



#
# use vars from config or defaults
#
#
#
export APP_PORT=${APP_PORT:-80}
export APP_SERVICE=${APP_SERVICE:-"app.test"}

export DB_PORT=${DB_PORT:-3306}
export DB_USERNAME=${DB_USERNAME:-"root"}
export DB_DATABASE=${DB_DATABASE:-"app"}
export DB_PASSWORD=${DB_PASSWORD:-""}

export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWGROUP:-$(id -g)}



#
# Flags
#
#
#
if [ "$1" == "--version" ] || [ "$1" == "-v" ] || [ "$1" == "version" ]; then
    showVersion
    exit 1
fi

if [ "$1" == "--help" ] || [ "$1" == "-H" ] || [ "$1" == "help" ]; then
    showHelp
    exit 1
fi

if [ "$1" == "--publish" ] || [ "$1" == "-P" ] || [ "$1" == "publish" ]; then
    publishStubs
    exit 1
fi




# Proxy PHP commands to the "php" binary on the application container...
if [ "$1" == "php" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            -u houston \
            "$APP_SERVICE" \
            php "$@"
    else
        warn_down
    fi
    
# Edit .env file to set correct hostnames for mysql/redis
 elif [ "$1" == "init" ]; then
 
     echo -e "HOUSTON: ${COL_CYAN}Initialise${COL_RESET}..."
 
     COMPOSER=$(which composer)

     if [ ! -f .env ]; then
         echo -e "No ${COL_MAGENTA}.env${COL_RESET} file found within current working directory $(pwd)"
         echo -e "Create a ${COL_MAGENTA}.env${COL_RESET} file before re-initialising"
         exit 0
     fi

     echo -e "HOUSTON: Setting ${COL_MAGENTA}.env${COL_RESET} Variables"
     cp .env .env.houston.bak

     if [ ! -z "$(grep "DB_HOST" .env)" ]; then
         $SEDCMD "s/DB_HOST=.*/DB_HOST=mysql/" .env
     else
         echo "DB_HOST=mysql" >> .env
     fi

     if [ ! -z "$(grep "CACHE_DRIVER" .env)" ]; then
         $SEDCMD "s/CACHE_DRIVER=.*/CACHE_DRIVER=redis/" .env
     else
         echo "CACHE_DRIVER=redis" >> .env
     fi

     if [ ! -z "$(grep "SESSION_DRIVER" .env)" ]; then
         $SEDCMD "s/SESSION_DRIVER=.*/SESSION_DRIVER=redis/" .env
     else
         echo "SESSION_DRIVER=redis" >> .env
     fi

     if [ ! -z "$(grep "REDIS_HOST" .env)" ]; then
         $SEDCMD "s/REDIS_HOST=.*/REDIS_HOST=redis/" .env
     else
         echo "REDIS_HOST=redis" >> .env
     fi

     if [ -f .env.houston.bak ]; then
         rm .env.houston.bak
     fi

     echo ""
     echo -e "HOUSTON: ${COL_LGREEN}Ready for takeoff.${COL_RESET}"
     echo -e "Run: ${COL_CYAN}./vendor/bin/houston launch${COL_RESET}"
    

# Start up containers
elif [ "$1" == "launch" ]; then
    $COMPOSE up -d

# Stop the containers
elif [ "$1" == "land" ]; then
    $COMPOSE down

# Proxy Composer commands to the "composer" binary on the application container...
elif [ "$1" == "composer" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            -u houston \
            "$APP_SERVICE" \
            composer "$@"
    else
        warn_down
    fi

# Proxy Artisan commands to the "artisan" binary on the application container...
elif [ "$1" == "artisan" ] || [ "$1" == "art" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            -u houston \
            "$APP_SERVICE" \
            php artisan "$@"
    else
        warn_down
    fi

# Proxy the "test" command to the "php artisan test" Artisan command...
elif [ "$1" == "test" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            -u houston \
            "$APP_SERVICE" \
            php artisan test "$@"
    else
        warn_down
    fi

# Proxy the "dusk" command to the "php artisan dusk" Artisan command...
elif [ "$1" == "dusk" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            -u houston \
            -e "APP_URL=http://houston.test" \
            -e "DUSK_DRIVER_URL=http://selenium:4444/wd/hub" \
            "$APP_SERVICE" \
            php artisan dusk "$@"
    else
        warn_down
    fi

# Initiate a Laravel Tinker session within the application container...
elif [ "$1" == "tinker" ] ; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            -u houston \
            "$APP_SERVICE" \
            php artisan tinker
    else
        warn_down
    fi

# Proxy Node commands to the "node" binary on the application container...
elif [ "$1" == "node" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            -u houston \
            "$APP_SERVICE" \
            node "$@"
    else
        warn_down
    fi

# Proxy NPM commands to the "npm" binary on the application container...
elif [ "$1" == "npm" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            -u houston \
            "$APP_SERVICE" \
            npm "$@"
    else
        warn_down
    fi

# Proxy NPX commands to the "npx" binary on the application container...
elif [ "$1" == "npx" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            -u houston \
            "$APP_SERVICE" \
            npx "$@"
    else
        warn_down
    fi

# Proxy YARN commands to the "yarn" binary on the application container...
elif [ "$1" == "yarn" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            -u houston \
            "$APP_SERVICE" \
            yarn "$@"
    else
        warn_down
    fi

# Initiate a MySQL CLI terminal session within the "mysql" container...
elif [ "$1" == "mysql" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            mysql \
            bash -c 'MYSQL_PWD=${MYSQL_ROOT_PASSWORD} mysql -u ${MYSQL_USER} ${MYSQL_DATABASE}'
    else
        warn_down
    fi

# Initiate a Bash shell within the application container...
elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            -u houston \
            "$APP_SERVICE" \
            bash
    else
        warn_down
    fi

# Initiate a root user Bash shell within the application container...
elif [ "$1" == "root-shell" ] ; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            "$APP_SERVICE" \
            bash
    else
        warn_down
    fi

# If "dump" is used, run mysqldump
# from our mysql container
elif [ "$1" == "dump" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        $COMPOSE exec \
            mysql \
            bash -c 'MYSQL_PWD=$MYSQL_ROOT_PASSWORD mysqldump -u root --default-character-set=utf8mb4 $MYSQL_DATABASE'
    else
        $COMPOSE run --rm \
            mysql \
            bash -c 'MYSQL_PWD=$MYSQL_ROOT_PASSWORD mysqldump -u root --default-character-set=utf8mb4 $MYSQL_DATABASE'
    fi

# Share the site...
elif [ "$1" == "share" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        docker run --init beyondcodegmbh/expose-server share http://host.docker.internal:"$APP_PORT" \
        --server-host=laravel-houston.site \
        --server-port=8080 \
        "$@"
    else
        warn_down
    fi

# Pass unknown commands to the docker-compose binary...
else
    $COMPOSE "$@"
fi

else
   $COMPOSE ps
fi
